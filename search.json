[{"title":"Singleton单例模式","url":"https://sortinn.club/2019/01/19/Singleton单例模式/","content":"<h2 id=\"单例模式的目的是在系统中只实现一个类的实例。\"><a href=\"#单例模式的目的是在系统中只实现一个类的实例。\" class=\"headerlink\" title=\"单例模式的目的是在系统中只实现一个类的实例。\"></a>单例模式的目的是在系统中只实现一个类的实例。</h2><p><code>Singleton</code> 模式的简单实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>构造函数私有，表明该类无法被外部实例化；</li>\n<li>如果要获取该类的实例，就只能通过 <code>getInstance</code> 静态方法。</li>\n</ol>\n<a id=\"more\"></a>\n<p>在单线程下，这段代码是没有问题的。但是如果多线程访问 <code>getInstance</code> 方法，它们对于 <code>Singleton</code> 的判断都为 <code>null</code> ，那么系统中就会创建出多个该类的实例，这与单例模式的最初目的是相违背的。如果为线程加上 <code>synchronized</code> 同步锁呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的确是在同一时间只有一个类进行实例化，但是如果同时多个程序进入判断条件并且为 null ，之后就会排队进行，但是判断已经结束了（ <code>if(singleton == null)</code> 已判断结束），所以系统仍然会创建多个实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中加入双重判断之后，代码健壮了很多，不过仍然存在问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleton = <span class=\"keyword\">new</span> Singleton();</span><br></pre></td></tr></table></figure>\n<p>问题主要在这句。首先对象初始化过程并不是原子操作。这段代码实际上分为了三步：</p>\n<ul>\n<li>分配内存空间（1）</li>\n<li>初始化对象（2）</li>\n<li>将 <code>singleton</code> 对象指向分配的内存地址（3）</li>\n</ul>\n<p>但在 JVM 的即时编译器中存在指令重排序的优化。举一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//(1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>; <span class=\"comment\">//(2)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b; <span class=\"comment\">//(3)</span></span><br></pre></td></tr></table></figure>\n<p>理想情况下上面这段代码的执行顺序是 <code>1 &gt; 2 &gt; 3</code>，但是可能经过 <code>JVM</code> 的优化之后其执行顺序变成 <code>2 &gt; 1 &gt; 3</code>。</p>\n<p><strong>可以发现不管 JVM 怎么优化，前提都是保证单线程中最终结果不变的情况下进行的。</strong></p>\n<p>但是在多线程下，指令重排序就有可能出现问题。这也就是经过双重判断后上面的单例代码仍然存在问题的原因。</p>\n<p>对此，我们需要将 singleton 声明为 volatile。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(singleton == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>volatile</code> 关键字主要是为了防止指令重排，可以让对象初始化过程的三步操作顺序执行。另外一个作用是这个变量不会在多个线程中存在副本，而是直接从内存读取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中采用了 <code>JVM</code> 本身的机制来保证了线程的安全，<code>SingletonHolder</code> 是私有的，除了 <code>getInstance</code> 方法不能调用，这保证了只有 <code>getInstance</code> 方法调用的时候才进行初始化。而且在读的时候不存在问题。</p>\n","categories":["CSLearning"],"tags":["设计模式"]},{"title":"ClassLoader类加载机制","url":"https://sortinn.club/2019/01/19/ClassLoader类加载机制/","content":"<h2 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。</p>\n<p>其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，<strong>而解析阶段则不一定</strong>，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>\n<p>这里简要说明下 Java 中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对 Java 来说，绑定分为静态绑定和动态绑定：</p>\n<ul>\n<li>静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对 Java，简单的可以理解为程序编译期的绑定。Java 当中的方法只有 final，static，private 和构造方法是前期绑定的。</li>\n<li>动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在 Java 中，几乎所有的方法都是后期绑定的。</li>\n</ul>\n<p>下面详细讲述类加载过程中每个阶段所做的工作。</p>\n<a id=\"more\"></a>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><p>加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p>\n<ul>\n<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在 Java 堆中生成一个代表这个类的 java.lang.Class 对象，作为对方法区中这些数据的访问入口。</li>\n</ul>\n<p>注意，这里第 1 条中的二进制字节流并不只是单纯地从 Class 文件中获取，比如它还可以从 Jar 包中获取、从网络中获取（最典型的应用便是 Applet）、由其他文件生成（JSP 应用）等。</p>\n<p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p>\n<p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在 Java 堆中也创建一个 java.lang.Class 类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>\n<p>说到加载，不得不提到类加载器，下面就具体讲述下类加载器。</p>\n<p>类加载器虽然只用于实现类的加载动作，但它在 Java 程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就 Java 虚拟机中的唯一性，也就是说，即使两个类来源于同一个 Class 文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的 Class 对象的 equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用 instanceof 关键字对对象所属关系的判定结果。</p>\n<p>站在 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</p>\n<ul>\n<li>启动类加载器：它使用 C++ 实现（这里仅限于 Hotspot，也就是 JDK1.5 之后默认的虚拟机，有很多其他的虚拟机是用 Java 语言实现的），是虚拟机自身的一部分。</li>\n<li>所有其他的类加载器：这些类加载器都由 Java 语言实现，独立于虚拟机之外，并且全部继承自抽象类 java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li>\n</ul>\n<p>站在 Java 开发人员的角度来看，类加载器可以大致划分为以下三类：</p>\n<ul>\n<li>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在<code>JDK\\jre\\li</code>(JDK 代表 JDK 的安装目录，下同)下，或被<code>-Xbootclasspath</code>参数指定的路径中的，并且能被虚拟机识别的类库（如 rt.jar，所有的<code>java.*</code>开头的类均被 Bootstrap ClassLoader 加载）。启动类加载器是无法被 Java 程序直接引用的。</li>\n<li>扩展类加载器：Extension ClassLoader，该加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载<code>JDK\\jre\\lib\\ext</code>目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库（如<code>javax.*</code>开头的类），开发者可以直接使用扩展类加载器。</li>\n<li>应用程序类加载器：Application ClassLoader，该类加载器由 sun.misc.Launcher$AppClassLoader 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n<p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为 JVM 自带的 ClassLoader 只是懂得从本地文件系统加载标准的 java class 文件，因此如果编写了自己的 ClassLoader，便可以做到如下几点：</p>\n<ul>\n<li>在执行非置信代码之前，自动验证数字签名。</li>\n<li>动态地创建符合用户特定需要的定制化构建类。</li>\n<li>从特定的场所取得 java class，例如数据库中和网络中。</li>\n</ul>\n<p>事实上当使用 Applet 的时候，就用到了特定的 ClassLoader，因为这时需要从网络上加载 java class，并且要检查相关的安全信息，应用服务器也大都使用了自定义的 ClassLoader 技术。</p>\n<p>这几种类加载器的层次关系如下图所示：   </p>\n<p>这种层次关系称为类加载器的双亲委派模型。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，当然，它们之间的父子关系并不是通过继承关系来实现的，而是使用组合关系来复用父加载器中的代码。该模型在 JDK1.2 期间被引入并广泛应用于之后几乎所有的 Java 程序中，但它并不是一个强制性的约束模型，而是 Java 设计者们推荐给开发者的一种类的加载器实现方式。</p>\n<p>双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p>\n<p>使用双亲委派模型来组织类加载器之间的关系，有一个很明显的好处，就是 Java 类随着它的类加载器（说白了，就是它所在的目录）一起具备了一种带有优先级的层次关系，这对于保证 Java 程序的稳定运作很重要。例如，类java.lang.Object 类存放在<code>JDK\\jre\\lib</code>下的 rt.jar 之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了 Object 类在程序中的各种类加载器中都是同一个类。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>验证的目的是为了确保 Class 文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。</p>\n<ul>\n<li>文件格式的验证：验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。</li>\n<li>元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合 Java 语法规范的元数据信息。</li>\n<li>字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</li>\n<li>符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</li>\n</ul>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p>\n<ul>\n<li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li>\n<li>这里所设置的初始值通常情况下是数据类型默认的零值（如 0、0L、null、false 等），而不是被在 Java 代码中被显式地赋予的值。</li>\n</ul>\n<p>假设一个类变量的定义为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">3</span>；</span><br></pre></td></tr></table></figure>\n<p>那么变量 value 在准备阶段过后的初始值为 0，而不是 3，因为这时候尚未开始执行任何 Java 方法，而把 value 赋值为 3 的 putstatic 指令是在程序编译后，存放于类构造器 （）方法之中的，所以把 value 赋值为 3 的动作将在初始化阶段才会执行。</p>\n<p>这里还需要注意如下几点：</p>\n<ul>\n<li>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li>\n<li>对于同时被 static 和 final 修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被 final 修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li>\n<li>对于引用数据类型 reference 来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</li>\n<li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li>\n</ul>\n<p>如果类字段的字段属性表中存在 ConstantValue 属性，即同时被 final 和 static 修饰，那么在准备阶段变量 value 就会被初始化为 ConstValue 属性所指定的值。</p>\n<p>假设上面的类变量 value 被定义为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> value = <span class=\"number\">3</span>；</span><br></pre></td></tr></table></figure>\n<p>编译时 Javac 将会为 value 生成 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 3。回忆上一篇博文中对象被动引用的第 2 个例子，便是这种情况。我们可以理解为 <code>static final</code> 常量在编译期就将其结果放入了调用它的类的常量池中。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在 Class 类文件结构一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）。</p>\n<p>对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行。</p>\n<p>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info 四种常量类型。</p>\n<p>1、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</p>\n<p>2、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</p>\n<p>从下面一段代码的执行结果中很容易看出来字段解析的搜索顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> problems.solutions.tinytest.statictest;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sortinn</span></span><br><span class=\"line\"><span class=\"comment\"> * 解析阶段类的加载</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * **静态变量是否用final修饰，输出结果是不同的。**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用 static final 修饰的常量在编译期就将其结果放入了调用它的类的常量池中。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParsingStageInClassLoading</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(Son.m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Super</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Super class' static statement\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title\">Super</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Father class' static statement\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Son class' static statement\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Super class' static statement</span><br><span class=\"line\">Father class' static statement</span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>如果注释掉 Father 类中对 m 定义的那一行，则输出结果如下：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Super class' static statement</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p><strong>有人可能会疑惑，为什么子类的 static 语句块不会执行呢？</strong>下面分析：</p>\n<p><em>static 变量发生在静态解析阶段，也即是初始化之前，此时已经将字段的符号引用转化为了内存引用，也便将它与对应的类关联在了一起，由于在子类中没有查找到与 m 相匹配的字段，那么 m 便不会与子类关联在一起，因此并不会触发子类的初始化。</em></p>\n<p>3、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</p>\n<p>4、接口方法解析：与类方法解析步骤类似，知识接口不会有父类，因此，只递归向上搜索父接口就行了。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的 Java 程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器()方法的过程。</p>\n<p><strong>这里简单说明下()方法的执行规则:</strong></p>\n<p>1、()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。</p>\n<p>2、（）方法与实例构造器()方法（类的构造函数）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的()方法执行之前，父类的()方法已经执行完毕。因此，在虚拟机中第一个被执行的()方法的类肯定是java.lang.Object。</p>\n<p>3、()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成()方法。</p>\n<p>4、接口中不能使用静态语句块，但仍然有类变量（final static）初始化的赋值操作，因此接口与类一样会生成()方法。但是接口鱼类不同的是：执行接口的()方法不需要先执行父接口的()方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的()方法。</p>\n<p>5、虚拟机会保证一个类的()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的()方法，其他线程都需要阻塞等待，直到活动线程执行()方法完毕。如果在一个类的()方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</p>\n<p>下面给出一个简单的例子，以便更清晰地说明如上规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = a;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClinitTest</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(Child.b);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上面的代码，会打印出 2，也就是说 b 的值被赋为了 2。</p>\n<p>我们来看得到该结果的步骤。首先在准备阶段为类变量分配内存并设置类变量初始值，这样 A 和 B 均被赋值为默认值 0，而后再在调用()方法时给他们赋予程序中指定的值。当我们调用 Child.b 时，触发 Child 的()方法，根据规则 2，在此之前，要先执行完其父类Father的()方法，又根据规则1，在执行()方法时，需要按 static 语句或 static 变量赋值操作等在代码中出现的顺序来执行相关的 static 语句，因此当触发执行 Fathe r的()方法时，会先将 a 赋值为 1，再执行 static 语句块中语句，将 a 赋值为 2，而后再执行 Child 类的()方法，这样便会将 b 的赋值为 2。</p>\n<p>如果我们颠倒一下 Father 类中“public static int a = 1;”语句和“static语句块”的顺序，程序执行后，则会打印出1。很明显是根据规则 1，执行 Father 的()方法时，根据顺序先执行了 static 语句块中的内容，后执行了“public static int a = 1;”语句。</p>\n<p>另外，在颠倒二者的顺序之后，如果在 static 语句块中对 a 进行访问（比如将 a 赋给某个变量），在编译时将会报错，因为根据规则 1，它只能对 a 进行赋值，而不能访问。</p>\n<h3 id=\"极客学院-类加载机制\"><a href=\"#极客学院-类加载机制\" class=\"headerlink\" title=\"[极客学院-类加载机制](\"></a>[极客学院-类加载机制](</h3>","categories":[],"tags":["JVM"]},{"title":"PriorityQueue优先队列","url":"https://sortinn.club/2019/01/19/PriorityQueue优先队列/","content":"<h2 id=\"优先队列（Priority-Queue）\"><a href=\"#优先队列（Priority-Queue）\" class=\"headerlink\" title=\"优先队列（Priority Queue）\"></a>优先队列（Priority Queue）</h2><h3 id=\"队列和优先队列的区别\"><a href=\"#队列和优先队列的区别\" class=\"headerlink\" title=\"队列和优先队列的区别\"></a>队列和优先队列的区别</h3><ul>\n<li>普通队列：<strong>先进先出；后进后出</strong></li>\n<li>优先队列：<strong>出队顺序和入队顺序无关；和优先级有关。动态选择优先级最高的任务执行。</strong></li>\n</ul>\n<h3 id=\"PQ-仍满足-Queue-lt-E-gt-接口的定义\"><a href=\"#PQ-仍满足-Queue-lt-E-gt-接口的定义\" class=\"headerlink\" title=\"PQ 仍满足 Queue&lt;E&gt; 接口的定义\"></a><code>PQ</code> 仍满足 <code>Queue&lt;E&gt;</code> 接口的定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Interface Queue&lt;E&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">dequeue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">getFront</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PQ-的实现方式\"><a href=\"#PQ-的实现方式\" class=\"headerlink\" title=\"PQ 的实现方式\"></a><code>PQ</code> 的实现方式</h3><ul>\n<li>基于普通的线性结构——动态数组或链表</li>\n<li>基于顺序线性结构——有序数组或有序链表</li>\n<li>基于堆</li>\n</ul>\n<a id=\"more\"></a>\n<p>时间复杂度</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">底层数据结构</th>\n<th style=\"text-align:center\">入队</th>\n<th style=\"text-align:center\">出队（拿出最大元素）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">普通线性结构</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">顺序线性结构</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆</td>\n<td style=\"text-align:center\">O(logn)[最差case]</td>\n<td style=\"text-align:center\">O(logn)[最差case]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"堆的基本结构和性质\"><a href=\"#堆的基本结构和性质\" class=\"headerlink\" title=\"堆的基本结构和性质\"></a>堆的基本结构和性质</h3><ul>\n<li>堆本质是树。</li>\n<li>堆最主流的一种实现方式——使用二叉树来实现，即二叉堆（Binary Heap）。</li>\n<li>二叉堆是满足一些特殊性质的二叉树。</li>\n<li>二叉堆是一棵完全二叉树。</li>\n<li>二叉堆中某一节点的值总是不大于其父节点的值（最大堆，<strong>以下都以最大堆为例</strong>）。</li>\n</ul>\n<h3 id=\"二叉堆的实现——用数组来表示\"><a href=\"#二叉堆的实现——用数组来表示\" class=\"headerlink\" title=\"二叉堆的实现——用数组来表示\"></a>二叉堆的实现——用数组来表示</h3><h3 id=\"二叉堆的基本操作\"><a href=\"#二叉堆的基本操作\" class=\"headerlink\" title=\"二叉堆的基本操作\"></a>二叉堆的基本操作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Array&lt;E&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Array&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxHeap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Array&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.getSize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">parent</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"index-0 doesn't have parent.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftChild</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightChild</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index * <span class=\"number\">2</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉堆的重要操作\"><a href=\"#二叉堆的重要操作\" class=\"headerlink\" title=\"二叉堆的重要操作\"></a>二叉堆的重要操作</h3><ul>\n<li>siftup 上浮操作。在向二叉堆中添加新的元素之后，势必会破坏二叉堆的性质，这时我们就要对其结构进行调整，使其仍然维持二叉堆。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//向数组尾部添加新节点</span></span><br><span class=\"line\">       data.addLast(e);</span><br><span class=\"line\">       <span class=\"comment\">//上浮操作以保证二叉堆的性质</span></span><br><span class=\"line\">       siftUp(data.getSize() - <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上浮操作</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftUp</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//在此条件下需要上浮：下标在子代节点并且当前节点的父节点的值小于当前节点的值；</span></span><br><span class=\"line\">       <span class=\"comment\">//当前节点到达根节点或当前节点的父节点大于等于当前节点的值时，停止上浮</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span> &amp;&amp; data.get(parent(k)).compareTo(data.get(k)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           data.swap(k, parent(k));</span><br><span class=\"line\">           k = parent(k);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>siftdown 下沉操作。弹出二叉堆的最大元素（二叉堆的根节点）之后，根节点缺失，将二叉堆中最后一个节点补到根节点，此时已破坏二叉堆的性质，我们需要对此时的根节点进行下沉操作，以维持二叉堆。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看堆中最大的节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">findMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Heap is empty.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//弹出堆中最大的节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">extractMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    E max = findMax();</span><br><span class=\"line\">    <span class=\"comment\">//将最后一个节点补到根节点位置</span></span><br><span class=\"line\">    data.swap(<span class=\"number\">0</span>, data.getSize() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//移除此时的最后一个节点</span></span><br><span class=\"line\">    data.removeLast();</span><br><span class=\"line\">    <span class=\"comment\">//下沉根节点，维持二叉堆性质</span></span><br><span class=\"line\">    siftDown(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(leftChild(k) &lt; data.getSize())&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = leftChild(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt; data.getSize() &amp;&amp; data.get(j + <span class=\"number\">1</span>).compareTo(data.get(j)) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.get(k).compareTo(data.get(j)) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            data.swap(k, j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>replace 取出最大元素，放入新的元素。堆的大小不变。</li>\n</ul>\n<p>实现a：可以先 <code>extractMax</code> ，再 <code>add</code> ，两次 O(logn) 的操作。</p>\n<p>实现b：可以直接 <code>findMax</code> ，然后将堆顶元素替换为新插入的元素，再 <code>siftDown</code>，一次 O(logn) 的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取出最大元素，放入新的元素。堆的大小不变。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">replace</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    E max = findMax();</span><br><span class=\"line\">    data.set(<span class=\"number\">0</span>, e);</span><br><span class=\"line\">    siftDown(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>heapify 将任意数组整理成堆的形状。</li>\n</ul>\n<p>实现a：将 n 个元素逐个 <code>add</code> 进一个空堆中，算法复杂度为 O(nlogn)（n 个节点，每个节点执行 <code>add</code> 操作）。</p>\n<p>实现b：直接从最后一个非叶子节点开始执行 <code>siftDown</code> 操作。对于上图的堆来说，不用管 6、7、8、9、10 节点，直接对 5、4、3、2、1 节点 <code>siftDown</code> 。此实现的算法复杂度为 O(n)。（刚开始就抛弃了很多节点）。</p>\n<p>我们将 <code>heapify</code> 的操作放在 <code>MaxHeap</code> 的构造函数中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxHeap</span><span class=\"params\">(E[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span> || arr == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"array is empty\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       data = <span class=\"keyword\">new</span> Array&lt;&gt;(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> start = parent(arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">           siftDown(i);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于二叉堆实现优先队列\"><a href=\"#基于二叉堆实现优先队列\" class=\"headerlink\" title=\"基于二叉堆实现优先队列\"></a>基于二叉堆实现优先队列</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueue</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MaxHeap&lt;E&gt; maxHeap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PriorityQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        maxHeap = <span class=\"keyword\">new</span> MaxHeap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxHeap.getSize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxHeap.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">        maxHeap.add(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">dequeue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxHeap.extractMax();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFront</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxHeap.findMax();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["CSLearning"],"tags":["Date Structure"]},{"title":"Ordering in Guava","url":"https://sortinn.club/2019/01/19/Guava的Ordering/","content":"<h2 id=\"Guava基于Comparator比较器实现的排序器Ordering\"><a href=\"#Guava基于Comparator比较器实现的排序器Ordering\" class=\"headerlink\" title=\"Guava基于Comparator比较器实现的排序器Ordering\"></a>Guava基于Comparator比较器实现的排序器Ordering</h2><p>从实现上说，<code>Ordering</code> 实例就是一个特殊的 <code>Comparator</code> 实例。<code>Ordering</code> 把很多基于 <code>Comparator</code> 的静态方法（如 <code>Collections.max</code> ）包装为自己的实例方法（非静态方法），并且提供了链式调用方法，来定制和增强现有的比较器。</p>\n<h3 id=\"创建排序器：常见的排序器可以由下面的静态方法创建\"><a href=\"#创建排序器：常见的排序器可以由下面的静态方法创建\" class=\"headerlink\" title=\"创建排序器：常见的排序器可以由下面的静态方法创建\"></a><strong>创建排序器</strong>：常见的排序器可以由下面的静态方法创建</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#natural(\" target=\"_blank\" rel=\"noopener\"><code>natural()</code></a>)</td>\n<td style=\"text-align:center\">对可排序类型做自然排序，如数字按大小，日期按先后排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#usingToString(\" target=\"_blank\" rel=\"noopener\"><code>usingToString()</code></a>)</td>\n<td style=\"text-align:center\">按对象的字符串形式做字典排序[lexicographical ordering]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#from(java.util.Comparator\" target=\"_blank\" rel=\"noopener\"><code>from(Comparator)</code></a>)</td>\n<td style=\"text-align:center\">把给定的Comparator转化为排序器</td>\n</tr>\n</tbody>\n</table>\n<p>实现自定义的排序器时，除了用上面的 <code>from</code> 方法，也可以跳过实现 <code>Comparator</code> ，而直接继承 <code>Ordering</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Ordering&lt;String&gt; ordering = <span class=\"keyword\">new</span> Ordering&lt;String&gt;() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String left, String right)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (left.length() - right.length());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"链式调用方法-：通过链式调用，可以由给定的排序器衍生出其它排序器\"><a href=\"#链式调用方法-：通过链式调用，可以由给定的排序器衍生出其它排序器\" class=\"headerlink\" title=\"链式调用方法**：通过链式调用，可以由给定的排序器衍生出其它排序器\"></a>链式调用方法**：通过链式调用，可以由给定的排序器衍生出其它排序器</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>方法</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#reverse(\" target=\"_blank\" rel=\"noopener\"><code>reverse()</code></a>)</td>\n<td style=\"text-align:center\">获取语义相反的排序器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#nullsFirst(\" target=\"_blank\" rel=\"noopener\"><code>nullsFirst()</code></a>)</td>\n<td style=\"text-align:center\">使用当前排序器，但额外把null值排到最前面。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#nullsLast(\" target=\"_blank\" rel=\"noopener\"><code>nullsLast()</code></a>)</td>\n<td style=\"text-align:center\">使用当前排序器，但额外把null值排到最后面。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#compound(java.util.Comparator\" target=\"_blank\" rel=\"noopener\"><code>compound(Comparator)</code></a>)</td>\n<td style=\"text-align:center\">合成另一个比较器，以处理当前排序器中的相等情况。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#lexicographical(\" target=\"_blank\" rel=\"noopener\"><code>lexicographical()</code></a>)</td>\n<td style=\"text-align:center\">基于处理类型T的排序器，返回该类型的可迭代对象Iterable<t>的排序器。</t></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#onResultOf(com.google.common.base.Function\" target=\"_blank\" rel=\"noopener\"><code>onResultOf(Function)</code></a>)</td>\n<td style=\"text-align:center\">对集合中元素调用Function，再按返回值用当前排序器排序。</td>\n</tr>\n</tbody>\n</table>\n<p>例如，你需要下面这个类的排序器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span> String sortedBy;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> notSortedBy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到排序器应该能处理sortedBy为null的情况，我们可以使用下面的链式调用来合成排序器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ordering&lt;Foo&gt; ordering = Ordering.natural().nullsFirst().onResultOf(<span class=\"keyword\">new</span> Function&lt;Foo, String&gt;() &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(Foo foo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo.sortedBy;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当阅读链式调用产生的排序器时，应该从后往前读。上面的例子中，排序器首先调用apply方法获取sortedBy值，并把sortedBy为null的元素都放到最前面，然后把剩下的元素按sortedBy进行自然排序。之所以要从后往前读，是因为每次链式调用都是用后面的方法包装了前面的排序器。</p>\n<p><em>注：用compound方法包装排序器时，就不应遵循从后往前读的原则。为了避免理解上的混乱，请不要把compound写在一长串链式调用的中间，你可以另起一行，在链中最先或最后调用compound。</em></p>\n<p>超过一定长度的链式调用，也可能会带来阅读和理解上的难度。我们建议按下面的代码这样，在一个链中最多使用三个方法。此外，你也可以把Function分离成中间对象，让链式调用更简洁紧凑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ordering&lt;Foo&gt; ordering = Ordering.natural().nullsFirst().onResultOf(sortKeyFunction);</span><br></pre></td></tr></table></figure>\n<h3 id=\"运用排序器：Guava的排序器实现有若干操纵集合或元素值的方法\"><a href=\"#运用排序器：Guava的排序器实现有若干操纵集合或元素值的方法\" class=\"headerlink\" title=\"运用排序器：Guava的排序器实现有若干操纵集合或元素值的方法\"></a>运用排序器：Guava的排序器实现有若干操纵集合或元素值的方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>方法</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n<th style=\"text-align:center\"><strong>另请参见</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#greatestOf(java.lang.Iterable,%20int\" target=\"_blank\" rel=\"noopener\"><code>greatestOf(Iterable iterable, int k)</code></a>)</td>\n<td style=\"text-align:center\">获取可迭代对象中最大的k个元素。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#leastOf(java.lang.Iterable,%20int\" target=\"_blank\" rel=\"noopener\"><code>leastOf</code></a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#isOrdered(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>isOrdered(Iterable)</code></a>)</td>\n<td style=\"text-align:center\">判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#isStrictlyOrdered(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>isStrictlyOrdered</code></a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#sortedCopy(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>sortedCopy(Iterable)</code></a>)</td>\n<td style=\"text-align:center\">判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#immutableSortedCopy(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>immutableSortedCopy</code></a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#min(E,%20E\" target=\"_blank\" rel=\"noopener\"><code>min(E, E)</code></a>)</td>\n<td style=\"text-align:center\">返回两个参数中最小的那个。如果相等，则返回第一个参数。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#max(E,%20E\" target=\"_blank\" rel=\"noopener\"><code>max(E, E)</code></a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#min(E,%20E,%20E,%20E...\" target=\"_blank\" rel=\"noopener\"><code>min(E, E, E, E...)</code></a>)</td>\n<td style=\"text-align:center\">返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#max(E,%20E,%20E,%20E...\" target=\"_blank\" rel=\"noopener\"><code>max(E, E, E, E...)</code></a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#min(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>min(Iterable)</code></a>)</td>\n<td style=\"text-align:center\">返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。</td>\n<td style=\"text-align:center\"><a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#max(java.lang.Iterable\" target=\"_blank\" rel=\"noopener\"><code>max(Iterable)</code></a>), <a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#min(java.util.Iterator\" target=\"_blank\" rel=\"noopener\"><code>min(Iterator)</code></a>), <a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Ordering.html#max(java.util.Iterator\" target=\"_blank\" rel=\"noopener\"><code>max(Iterator)</code></a>)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><strong>原创文章，转载请注明：</strong> 转载自<a href=\"http://ifeve.com/\" target=\"_blank\" rel=\"noopener\">并发编程网 – ifeve.com</a><strong>本文链接地址:</strong> [[Google Guava] 排序: Guava强大的”流畅风格比较器”](</p>\n","categories":["CSLearning"],"tags":["Guava"]},{"title":"每日工作","url":"https://sortinn.club/2019/01/19/每日工作/","content":"<h2 id=\"上班前今日要事\"><a href=\"#上班前今日要事\" class=\"headerlink\" title=\"上班前今日要事\"></a>上班前今日要事</h2><ol>\n<li>今天的计划；</li>\n<li>本周要事。</li>\n</ol>\n<h2 id=\"下班前工作日报\"><a href=\"#下班前工作日报\" class=\"headerlink\" title=\"下班前工作日报\"></a>下班前工作日报</h2><ol>\n<li>今日完成；</li>\n<li>明日计划。</li>\n</ol>\n<h2 id=\"开会时刻\"><a href=\"#开会时刻\" class=\"headerlink\" title=\"开会时刻\"></a>开会时刻</h2><ol>\n<li>全神贯注；</li>\n<li>纸质笔记本。</li>\n</ol>\n<h2 id=\"重要的项目会\"><a href=\"#重要的项目会\" class=\"headerlink\" title=\"重要的项目会\"></a>重要的项目会</h2><ol>\n<li>提前几天讨论，收集足够多信息；</li>\n<li>确认会议前应该发出的问题列表；</li>\n<li>和与会者看到「共同的世界」，找到「共同的利益」，确定「共同的目标」，即对于问题和方案形成共识。</li>\n</ol>\n<h2 id=\"每天的阅读时刻\"><a href=\"#每天的阅读时刻\" class=\"headerlink\" title=\"每天的阅读时刻\"></a>每天的阅读时刻</h2><ol>\n<li>保证每日阅读量；</li>\n<li>获取能量和启发。</li>\n</ol>\n","categories":["Personal Growth"],"tags":["日程"]},{"title":"数组知多少","url":"https://sortinn.club/2019/01/19/数组知多少/","content":"<h2 id=\"数组是怎么实现随机访问的？\"><a href=\"#数组是怎么实现随机访问的？\" class=\"headerlink\" title=\"数组是怎么实现随机访问的？\"></a>数组是怎么实现随机访问的？</h2><p>数组的专业定义：</p>\n<blockquote>\n<p>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>\n</blockquote>\n<p>有几个地方需要注意：</p>\n<ol>\n<li>线性表（Linear List）</li>\n</ol>\n<p>顾名思义，<strong>线性表</strong>就是数据排成像线一样的结构。每个线性表上的数据最多只有前和后两个方向。除了数组，链表（Linked List）、栈（Stack）、队列（Queue）等也都是线性表结构。</p>\n<p>与线性表相对立的自然就是<strong>非线性表</strong>，如二叉树（Binary Tree）、堆（Heap）、图（Graph）等。在非线性表中，数据间并非简单的前后关系。</p>\n<a id=\"more\"></a>\n<ol>\n<li>连续的内存空间和相同类型的数据</li>\n</ol>\n<p>数组的杀手锏级特性<strong>“随机访问”</strong>和这两个限制是分不开的。相反，这两个特点也同样“限制”了数组的很多操作，变得非常低效，比如从数组中<strong>删除数据</strong>或向数组中<strong>插入数据</strong>，为了保证数组本身的连续性，就不得不做大量的数据搬移工作。</p>\n<p>说道随机访问，它的原理是什么呢？</p>\n<p>我们拿一个长度为 10 的 int 类型的数组 int[] array = new int[10] 来举例。下图中，计算机给数组 array 分配了一块连续的内存空间 1000 ~ 1039，其中，内存块的首地址为 base_address = 1000。</p>\n<p>众所周知，计算机是通过地址来访问内存中的数据的。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式计算出该元素的内存地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[i]_address = base_address + i * data_type_size</span><br></pre></td></tr></table></figure>\n<p>其中 data_type_size 是数组中存储的该类型元素的大小。例如在 Java 中，int 类型的大小为 4 个字节，所以如果是 int 类型的数组，那么 data_type_size 就是 4 个字节。</p>\n<p>另外，常常有人对比数组和链表时会这样说：“链表适合插入、删除，时间复杂度为 O(1)；数组适合查找，查找的时间复杂度为 O(1)”。</p>\n<p>实际上，这种说法并不准确。数组的确适合查找操作，不过查找的时间复杂度并不是 O(1)。即便是排好序的数组，用二分查找这样高效的算法，它的查找时间复杂度也为 O(logn)。所以正确的表述应该是：</p>\n<blockquote>\n<p>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</p>\n</blockquote>\n<h2 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h2><p>前面提了一下，数组为了保持其内存的连续性，会导致插入和删除操作比较低效。为什么会低效？有什么改进方法吗？</p>\n<ol>\n<li>插入</li>\n</ol>\n<p>假定数组的长度为 n，现在我们要将一个数据插入到数组的第 k 个位置。为了把第 k 个位置腾出来给新来的数据，我们需要将第 k ~ n 这部分元素都顺序向后挪动一位。那么插入操作的时间复杂度为多少呢？下面分析一下：</p>\n<p>如果在数组末尾插入元素，那么直接写入就好，不需要挪动元素，此时的时间复杂度为 O(1)。</p>\n<p>如果在数组开头插入元素，那么需要将数组中所有的数据都向后挪动一位，这是最坏的情况，时间复杂度为O(n)。</p>\n<p>因为我们在每个位置插入元素的概率都是一样的，所以平均情况的时间复杂度为</p>\n<p>O((1 + 2 + 3 + … + n) / n)= <strong>O(n)</strong>。</p>\n<p>也就是说在数组中插入一个元素的时间复杂度为O(n)。</p>\n<p>如果数组是有序的，我们在某个位置插入一个新的元素时，就要按照上面分析的方法挪动 k 之后的数据。但是如果数组是无序的，或者说数组中元素的排列是没有规律的，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据移动，我们有一个简单的方法就是，直接将第 k 位的数据搬移到数组的最后一位，把新的元素直接放入第 k 位即可。</p>\n<p>利用这种处理技巧，在特定情境下，在数组的特定位置插入元素的时间复杂度就降为 <strong>O(1)</strong>。</p>\n<ol>\n<li>删除</li>\n</ol>\n<p>与插入数据类似，如果我们要删除第 k 个位置的数据，为了保证连续性，我们需要将第 k 个位置之后的元素全部给前面挪动一位。</p>\n<p>如果删除数组末尾的数据，则最好情况的时间复杂度为 O(1)；如果删除开头的数据，则最坏情况的时间复杂度为 O(n)；平均时间复杂度也为 O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会高很多呢？</p>\n<p>举个例子。数组 array[10] 中存储了 8 个元素：a, b, c, d, e, f, g, h。现在我们要一次删除 a, b, c 这三个元素。</p>\n<p><img src=\"/images/数组删除操作.jpg\" alt=\"数组删除操作\"></p>\n<p>为了避免 d, e, f, g, h 这几个数据被搬移三次，我们可以先记录下已经删除的数据。每次删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储新的数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。（这也是 JVM 标记清除垃圾回收算法的核心思想）</p>\n<h2 id=\"警惕数组的越界访问问题\"><a href=\"#警惕数组的越界访问问题\" class=\"headerlink\" title=\"警惕数组的越界访问问题\"></a>警惕数组的越界访问问题</h2><p>分析一下下面这段 C 语言代码的运行结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt;= <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        arr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现问题了吗？这段代码的运行结果并非打印三行“hello world”，而是会无限打印“hello world”。为什么呢？</p>\n<p>因为数组的大小是 3，而代码中因为书写错误导致 for 循环的终止条件写为了 i &lt;= 3 而非 i &lt; 3。所以当 i = 3 时，数组 arr[3] 访问越界。在 C 语言中，arr[3] 这个地址正好是存储变量 i 的内存地址，因此执行到 arr[3] = 0 时也就相当于 i = 0，所以就会导致这个循环无法停止，继而无限打印“hello world”。</p>\n<p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该怎么处理。因为访问数组的本质就是访问一段连续内存，只要数组通过偏移公式计算得到的内存地址是可用的，那么程序可能就不会报任何错误。</p>\n<p>其实很多病毒也正是利用了代码中的数组越界可能访问非法地址的漏洞，来攻击系统，所以一定要警惕数组越界。</p>\n<h2 id=\"容器能否完全代替数组？\"><a href=\"#容器能否完全代替数组？\" class=\"headerlink\" title=\"容器能否完全代替数组？\"></a>容器能否完全代替数组？</h2><p>用 Java 举例，Java 中的 ArrayList 的使用频度非常高。那么它与数组相比有什么优势呢？</p>\n<ol>\n<li>将很多数组操作的细节封装</li>\n<li>支持动态扩容</li>\n</ol>\n<p>每次使用 ArrayList，我们完全不用关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够时，它都会自动将空间扩容为之前容量的 1.5 大小。不过，ArrayList 的扩容操作非常耗时，涉及到内存申请和数据搬移，因此，如果能事先确定需要存储的数据大小，<strong>最好在创建 ArrayList 的时候指定其大小</strong>。</p>\n<p>比如我们要从数据库中取出 10000 条数据放入 ArrayList 中。如果我们事先指定了 ArrayList 的大小，那么可以省掉很多次内存申请和数据搬移的操作。因为 ArrayList 的默认大小是 10。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;User&gt; users = <span class=\"keyword\">new</span> ArrayList(<span class=\"number\">10000</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">  users.add(xxx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作为高级语言编程者，那数组是不是就无用武之地了呢？并非如此。</p>\n<ol>\n<li>ArrayList 无法存储基本数据类型，如 int, double 等，需要装箱为 Integer, Double 类才可以存储。而自动装箱（Autoboxing）和自动拆箱（Unboxing）则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本数据类型，那么就可以选用数组。</li>\n<li>如果数组的大小事先已知，并且对数据的操作很简单，不需要用 ArrayList 的大部分方法，就可以直接使用数组。</li>\n<li>还有当表示多维数组时，用数组往往会更加直观。如 <code>int[][] array</code>；而使用容器则要这样定义：<code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt; array</code>。</li>\n</ol>\n<h2 id=\"二维数组内存寻址\"><a href=\"#二维数组内存寻址\" class=\"headerlink\" title=\"二维数组内存寻址\"></a>二维数组内存寻址</h2><p>对于 m * n 的数组，<code>a[i][j]</code> (i &lt; m, j &lt; n)的地址为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address = base_address + ( i * n + j) * type_size</span><br></pre></td></tr></table></figure>\n<h2 id=\"对于示例中无限循环的底层解释\"><a href=\"#对于示例中无限循环的底层解释\" class=\"headerlink\" title=\"对于示例中无限循环的底层解释\"></a>对于示例中无限循环的底层解释</h2><p>函数体内的局部变量存在栈上，且是连续压栈。在Linux进程的内存布局中，栈区在高地址空间，从高向低增长，也就是说，栈是向下增长的。</p>\n<p>变量 i 和 arr 在相邻地址，且 i 比 arr 的地址大，所以 arr 越界正好访问到 i。当然，前提是 i 和 arr 元素同类型，否则那段代码仍是未决行为。</p>\n","categories":["CS Learning"],"tags":["Data Structure"]},{"title":"Hip-Hop力量","url":"https://sortinn.club/2019/01/19/Hip-Hop力量/","content":"<p><img src=\"https://unsplash.com/photos/EUhk0hrHaFY\" alt=\"\"></p>\n<p>从中国新说唱播出以后，我发现自己喜欢上了嘻哈文化。又回过头完整过了一遍第一季中国有嘻哈，让我振奋和感动。我发觉真正发扬Hip-Hop文化的，是我们这些十分年轻的人，他们真正喜爱Hip-Hop文化并把Hip-Hop当做自己的生活方式。</p>\n<p>文化传播需要一批人的力量，也需要一个强大的开拓者。我想任何文化都是如此。我们不能忽视年轻人的力量，更不能小瞧我们自己的力量。</p>\n","categories":["生活"],"tags":["Hip-Hop文化"]},{"title":"记一笔","url":"https://sortinn.club/2018/09/19/记一笔/","content":"<h2 id=\"人生第一个-OFFER\"><a href=\"#人生第一个-OFFER\" class=\"headerlink\" title=\"人生第一个 OFFER\"></a>人生第一个 OFFER</h2><ul>\n<li>时间段：2018年7月26日至2018年9月18日下午5点30分</li>\n<li>地点：西安市雁塔区高新区科技路37号海星城市广场A座 西安亚朵酒店（高新店）</li>\n<li>结果：去哪儿网，第三面HR面结束并发OFFER</li>\n<li>心情：痛快，酣畅淋漓的那种</li>\n</ul>\n","categories":["生活"],"tags":["求职"]},{"title":"ArrayList小结","url":"https://sortinn.club/2018/09/16/ArrayList小结/","content":"<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><p>ArrayList 继承了 AbstractList 类，实现了 List、RandomAccess等接口，实现了 List 接口的所有操作，并且允许加入所有类型的元素，包括 <code>null</code> 。ArrayList 是大小可变的，提供了一些方法来操作内部用于存储 list 的数组大小(size)。ArrayList 和 Vector 类大致上是相同的，只是说 ArrayList 类是不同步的(unsynchronized)，而 Vector 是同步的。</p>\n<a id=\"more\"></a>\n<p><code>size()</code>、<code>isEmpty()</code>、 <code>get()</code> 、<code>set()</code> 、<code>iterator()</code>、 <code>listIterator()</code> ，这些操作的时间复杂度都是常数级别的 (constant time) 。<code>add()</code> 方法的时间复杂度是平摊的常数级别 (amortized constant time) ，也就是说，添加 n 个元素的操作可在 O(n) 的时间复杂度完成，平均下来每个操作的平摊时间就为 O(n) / n = O(1)（<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">平摊分析（维基百科）</a>）。</p>\n<h3 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Default initial capacity.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>ArrayList 的实例有一个默认的容量 (default capacity)，这个容量其实是存储该 list 的数组的大小，默认容量为 10 。这个容量会随着元素添加进 list 而自动扩容 (grow)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class=\"line\"><span class=\"comment\"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class=\"line\"><span class=\"comment\"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class=\"line\"><span class=\"comment\"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData; <span class=\"comment\">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>\n<p>默认存放 list 的数组，为了能让 ArrayList 的内部类访问到它，并没有使用 private 修饰符修饰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Appends the specified element to the end of this list.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e element to be appended to this list</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class=\"doctag\">@link</span> Collection#add&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>add()</code> 方法首先要进行确认内部的数组容量是否够用（扩容校验），然后再将要插入的值添加到数组尾部，并将数组大小 size++ 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class=\"line\"><span class=\"comment\">     * number of elements specified by the minimum capacity argument.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity the desired minimum capacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>扩容校验经过一系列判断之后，如果数组不为空，最终扩容的任务就交给了 <code>grow()</code> 方法。ArrayList 会将数组的容量扩大为之前的 1.5 倍。扩容的本质是调用 <code>System.arraycopy()</code> 方法进行数组复制，这是非常麻烦和费时的。另外 <code>add(int index, E element)</code> 方法是在指定位置插入元素，本质调用的也是 <code>System.arraycopy()</code> 方法。</p>\n<p>所以在使用 ArrayList 之前最好确定好容量的大小，不然扩容带来的内存和时间消耗是非常大的。如果指定的数据集合需要进行大量插入（中间插入）操作，推荐使用 <a href=\"\">LinkedList</a>。或者可以使用 <code>ensureCapacity()</code> 来手动增加 ArrayList 实例的容量，以减少递增式再分配的数量。</p>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Removes all of the elements from this list.  The list will</span></span><br><span class=\"line\"><span class=\"comment\"> * be empty after this call returns.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>clear()</code> 方法将 list 清空，数组中所有值都置为 <code>null</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        RangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayList 本质就是动态数组，数组擅长的就是随机访问，并且 ArrayList 也实现了 RandomAccess 接口，因此 ArrayList 的 <code>get()</code> 方法的速度还是很快的。</p>\n<h3 id=\"为什么扩容-1-5-倍？\"><a href=\"#为什么扩容-1-5-倍？\" class=\"headerlink\" title=\"为什么扩容 1.5 倍？\"></a>为什么扩容 1.5 倍？</h3><p>在这里有一个疑问，为什么每次扩容处理会是1.5倍，而不是2.5、3、4倍呢？通过google查找，发现1.5倍的扩容是最好的倍数。因为一次性扩容太大(例如2.5倍)可能会浪费更多的内存(1.5倍最多浪费33%，而2.5被最多会浪费60%，3.5倍则会浪费71%……)。但是一次性扩容太小，需要多次对数组重新分配内存，对性能消耗比较严重。所以1.5倍刚刚好，既能满足性能需求，也不会造成很大的内存消耗。</p>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><p>ArrayList 实现了 java.io.Serializable 接口，但是自己定义了序列化和反序列化。因为 ArrayList 是基于动态数组实现的，所以并不是所有的空间都被使用，因此 elementData 数组使用 <code>transient</code> 修饰，可以防止被自动序列化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class=\"line\"><span class=\"comment\"> * is, serialize it).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *             instance is emitted (int), followed by all of its elements</span></span><br><span class=\"line\"><span class=\"comment\"> *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> java.io.IOException</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write out element count, and any hidden stuff</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\">    s.defaultWriteObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class=\"line\">    s.writeInt(size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Write out all elements in the proper order.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</span><br><span class=\"line\">        s.writeObject(elementData[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modCount != expectedModCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class=\"line\"><span class=\"comment\"> * deserialize it).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Read in size, and any hidden stuff</span></span><br><span class=\"line\">    s.defaultReadObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Read in capacity</span></span><br><span class=\"line\">    s.readInt(); <span class=\"comment\">// ignored</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// be like clone(), allocate array based upon size not capacity</span></span><br><span class=\"line\">        ensureCapacityInternal(size);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object[] a = elementData;</span><br><span class=\"line\">        <span class=\"comment\">// Read in all elements in the proper order.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;size; i++) &#123;</span><br><span class=\"line\">            a[i] = s.readObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayList 只会将数组中存在的元素序列化。另外，当对象中自定义了 writeObject 和 readObject 时，JVM 会调用这两个自定义的方法来实现序列化和反序列化。</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"\">JDK 1.8</a></li>\n<li><a href=\"https://github.com/crossoverJie/JCSprout/blob/master/MD/ArrayList.md\" target=\"_blank\" rel=\"noopener\">ArrayList/Vector 的底层分析</a></li>\n<li>[<a href=\"https://www.cnblogs.com/chenssy/p/3498468.html\" target=\"_blank\" rel=\"noopener\">java提高篇（二一）—–ArrayList</a>](</li>\n</ul>\n","categories":["CS Learning"],"tags":["Java集合类"]},{"title":"Maven入门","url":"https://sortinn.club/2018/09/13/Maven入门/","content":"<h2 id=\"Maven-的运行机制\"><a href=\"#Maven-的运行机制\" class=\"headerlink\" title=\"Maven 的运行机制\"></a>Maven 的运行机制</h2><p>了解 <code>Maven</code> 的运行机制之前，先了解两个概念：</p>\n<ul>\n<li><code>Maven</code> 生命周期</li>\n<li><code>Maven</code> 插件</li>\n</ul>\n<p>(一) <code>Maven</code> 生命周期</p>\n<p><code>Maven</code> 在 <code>META-INF/plexus/components.xml</code> 中定义了3个生命周期：</p>\n<ul>\n<li>default Lifecycle</li>\n<li>clean Lifecycle</li>\n<li>site Lifecycle</li>\n</ul>\n<p>(二) <code>Maven</code> 插件</p>\n<p>插件是 <code>Maven</code> 的核心，所有的功能都是由插件提供的。而每个插件都有多个<code>goal</code>，即目标，这些目标共同组成该插件的完整功能。比如：</p>\n<p><code>maven-clean-plugin</code> 插件有三个 <code>goal</code> ，分别为：<code>pre-clean</code>、<code>clean</code> 和 <code>post-clean</code></p>\n<a id=\"more\"></a>\n<h2 id=\"Maven-仓库\"><a href=\"#Maven-仓库\" class=\"headerlink\" title=\"Maven 仓库\"></a>Maven 仓库</h2><p><code>Maven</code> 仓库分为<strong>本地仓库</strong>和<strong>远程仓库</strong>，远程仓库又分为中央仓库、私服和其他公共仓库。如下：</p>\n<ul>\n<li>本地仓库：当前用户目录下的.m2/repository文件夹</li>\n<li>远程仓库<ul>\n<li>中央仓库：<code>Maven</code> 默认仓库</li>\n<li>私服：如 <code>nexus</code></li>\n<li>其他公共仓库：如阿里云、开源中国等</li>\n</ul>\n</li>\n</ul>\n<p>那 <code>Maven</code> 如何从仓库下载 <code>jar</code> 包呢？一句话概括就是就近原则。<code>Maven</code>先从本地仓库寻找，如果没找到，就去远程仓库下载。</p>\n<p><code>Maven</code> 如何去找 <code>jar</code> 包呢？<code>Maven</code> 使用坐标的概念来唯一标识资源：</p>\n<ul>\n<li><code>groupId</code>：项目名称，一般格式为域名倒置+项目名；</li>\n<li><code>artifactId</code>：项目模块名称；</li>\n<li><code>version</code>：项目的版本号。</li>\n</ul>\n<p>如：向项目中添加依赖 <code>spring-context</code> :</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--pom.xml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring-verison</span>&gt;</span>5.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-verison</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-verison&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Maven-的命令\"><a href=\"#Maven-的命令\" class=\"headerlink\" title=\"Maven 的命令\"></a>Maven 的命令</h2><ul>\n<li><code>Maven</code> 的第一个命令，我相信大部分同学都是这个：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn -v</span><br></pre></td></tr></table></figure>\n<p>如果正确配置了 <code>Maven</code> 的环境变量，那么不出所料会显示机器上安装的 <code>Maven</code> 的相关信息。</p>\n<ul>\n<li>使用 <code>Maven</code> 命令构建项目</li>\n</ul>\n<p>其实 <code>Maven</code> 的命令分为两种：<strong>插件命令</strong>和<strong>生命周期阶段命令</strong>。</p>\n<p>在终端下输入 <code>mvn</code> 回车，会显示一下错误信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn</span><br><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD FAILURE</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 0.122 s</span><br><span class=\"line\">[INFO] Finished at: 2018-09-13T17:23:24+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[ERROR] No goals have been specified <span class=\"keyword\">for</span> this build. You must specify a valid lifecycle phase or a goal <span class=\"keyword\">in</span> the format &lt;plugin-prefix&gt;:&lt;goal&gt; or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, <span class=\"built_in\">test</span>-compile, process-test-classes, <span class=\"built_in\">test</span>, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -&gt; [Help 1]</span><br><span class=\"line\">[ERROR]</span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to <span class=\"built_in\">enable</span> full debug logging.</span><br><span class=\"line\">[ERROR]</span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please <span class=\"built_in\">read</span> the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException</span><br></pre></td></tr></table></figure>\n<p>其中第一个 <code>[ERROR]</code> 显示的内容告诉我们必须按照给出的格式指定有效的生命周期阶段或目标。</p>\n<h3 id=\"（一）-使用插件命令\"><a href=\"#（一）-使用插件命令\" class=\"headerlink\" title=\"（一） 使用插件命令\"></a>（一） 使用插件命令</h3><p>现在我们想要使用 <code>maven-archetype-plugin</code> 插件来构建项目，我们先通过下面的命令来查询一下这个插件的描述：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn <span class=\"built_in\">help</span>:describe -Dplugin=org.apache.maven.plugins:maven-archetype-plugin</span><br></pre></td></tr></table></figure>\n<p><code>Maven</code> 会先去本地仓库寻找这个插件，如果本地仓库没有，<code>Maven</code> 会先从远程仓库下载，然后打印出这个插件的 <code>Info</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] org.apache.maven.plugins:maven-archetype-plugin:3.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Maven Archetype Plugin</span><br><span class=\"line\">Description: Maven Archetype is a <span class=\"built_in\">set</span> of tools to deal with archetypes, i.e.</span><br><span class=\"line\">  an abstract representation of a kind of project that can be instantiated into</span><br><span class=\"line\">  a concrete customized Maven project. An archetype knows <span class=\"built_in\">which</span> files will be</span><br><span class=\"line\">  part of the instantiated project and <span class=\"built_in\">which</span> properties to fill to properly</span><br><span class=\"line\">  customize the project.</span><br><span class=\"line\">Group Id: org.apache.maven.plugins</span><br><span class=\"line\">Artifact Id: maven-archetype-plugin</span><br><span class=\"line\">Version: 3.0.1</span><br><span class=\"line\">Goal Prefix: archetype</span><br><span class=\"line\"></span><br><span class=\"line\">This plugin has 7 goals:</span><br><span class=\"line\"></span><br><span class=\"line\">archetype:crawl</span><br><span class=\"line\">  Description: Crawl a Maven repository (filesystem, not HTTP) and creates a</span><br><span class=\"line\">    catalog file.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 这里省略的是插件其中几个目标的详细描述</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">archetype:generate</span><br><span class=\"line\">  Description: Generates a new project from an archetype, or updates the</span><br><span class=\"line\">    actual project <span class=\"keyword\">if</span> using a partial archetype. If the project is fully</span><br><span class=\"line\">    generated, it is generated <span class=\"keyword\">in</span> a directory corresponding to its artifactId.</span><br><span class=\"line\">    If the project is updated with a partial archetype, it is <span class=\"keyword\">done</span> <span class=\"keyword\">in</span> the</span><br><span class=\"line\">    current directory.</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">## 这里省略的是插件其中几个目标的详细描述</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，<code>Maven</code> 简化了插件名，如果要使用该插件，只需要指明其 <code>Goal Prefix</code> 即可，也就是这个插件的目标前缀，<code>Maven</code> 就可以识别出具体插件。</p>\n<p>如我们使用 <code>archetype</code> 提供的一个 <code>goal</code> : <code>archetype:generate</code> 来生成一个 <code>Maven</code> 项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn archetype:generate -DarchetypeCatalog=Internal</span><br></pre></td></tr></table></figure>\n<p>其中 <code>Internal</code> 参数是可选择的，代表Maven内置的 <code>archetype-catalog.xml</code> 文件；如果调用本地的    <code>archetype-catalog.xml</code> 文件，那么这个参数应改为 <code>local</code> ，前提是需要将 <code>archetype-catalog.xml</code> 存到本地的 <code>.m2</code> 文件夹内。而如果不加 <code>-DarchetypeCatalog</code> 参数，那么 <code>Maven</code> 将自动从远程仓库下载这个文件，这个过程是相对来说比较漫长的（除非修改远程仓库为私服或其他的公共仓库）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------&lt; org.apache.maven:standalone-pom &gt;-------------------</span><br><span class=\"line\">[INFO] Building Maven Stub Project (No POM) 1</span><br><span class=\"line\">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &gt;&gt;&gt; maven-archetype-plugin:3.0.1:generate (default-cli) &gt; generate-sources @ standalone-pom &gt;&gt;&gt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &lt;&lt;&lt; maven-archetype-plugin:3.0.1:generate (default-cli) &lt; generate-sources @ standalone-pom &lt;&lt;&lt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---</span><br><span class=\"line\">[INFO] Generating project <span class=\"keyword\">in</span> Interactive mode</span><br><span class=\"line\">[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)</span><br><span class=\"line\">Choose archetype:</span><br><span class=\"line\">1: internal -&gt; org.apache.maven.archetypes:maven-archetype-archetype (An archetype <span class=\"built_in\">which</span> contains a sample archetype.)</span><br><span class=\"line\">2: internal -&gt; org.apache.maven.archetypes:maven-archetype-j2ee-simple (An archetype <span class=\"built_in\">which</span> contains a simplifed sample J2EE application.)</span><br><span class=\"line\">3: internal -&gt; org.apache.maven.archetypes:maven-archetype-plugin (An archetype <span class=\"built_in\">which</span> contains a sample Maven plugin.)</span><br><span class=\"line\">4: internal -&gt; org.apache.maven.archetypes:maven-archetype-plugin-site (An archetype <span class=\"built_in\">which</span> contains a sample Maven plugin site.</span><br><span class=\"line\">      This archetype can be layered upon an existing Maven plugin project.)</span><br><span class=\"line\">5: internal -&gt; org.apache.maven.archetypes:maven-archetype-portlet (An archetype <span class=\"built_in\">which</span> contains a sample JSR-268 Portlet.)</span><br><span class=\"line\">6: internal -&gt; org.apache.maven.archetypes:maven-archetype-profiles ()</span><br><span class=\"line\">7: internal -&gt; org.apache.maven.archetypes:maven-archetype-quickstart (An archetype <span class=\"built_in\">which</span> contains a sample Maven project.)</span><br><span class=\"line\">8: internal -&gt; org.apache.maven.archetypes:maven-archetype-site (An archetype <span class=\"built_in\">which</span> contains a sample Maven site <span class=\"built_in\">which</span> demonstrates</span><br><span class=\"line\">      some of the supported document types like APT, XDoc, and FML and demonstrates how</span><br><span class=\"line\">      to i18n your site. This archetype can be layered upon an existing Maven project.)</span><br><span class=\"line\">9: internal -&gt; org.apache.maven.archetypes:maven-archetype-site-simple (An archetype <span class=\"built_in\">which</span> contains a sample Maven site.)</span><br><span class=\"line\">10: internal -&gt; org.apache.maven.archetypes:maven-archetype-webapp (An archetype <span class=\"built_in\">which</span> contains a sample Maven Webapp project.)</span><br><span class=\"line\">Choose a number or apply filter (format: [groupId:]artifactId, <span class=\"keyword\">case</span> sensitive contains): 7:</span><br><span class=\"line\"><span class=\"comment\"># 等待输入</span></span><br></pre></td></tr></table></figure>\n<p>这里指明使用 <code>Internal</code> 属性来调取 <code>Maven</code> 内置的原型 (<code>archetype</code>) 目录，这里列出了 <code>10</code> 条，每一条对应一种 <code>Maven</code> 生成的项目类型。选择合适的项目类型，然后根据提示输入 <code>groupId</code> 和 <code>artifactId</code> 之后就可成功构建 <code>Maven</code> 项目。</p>\n<ul>\n<li>将项目导入IEDA</li>\n</ul>\n<p>如果是 <code>eclipse</code> 项目，可以使用 <code>Maven</code> 提供的插件 <code>eclipse</code> 中的 <code>goal</code> : <code>eclipse:clean</code> 来将项目中的<code>.project, .classpath, .wtpmodules</code> 文件和 <code>.settings</code> 文件夹删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn eclipse:clean</span><br></pre></td></tr></table></figure>\n<p>然后使用插件 <code>idea</code> 中的 <code>goal</code> : <code>idea:idea</code> 来根据 <code>POM</code> 构建 <code>IEDA</code> 文件(<code>.ipr, .iml, .iws</code> 文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn idea:idea</span><br></pre></td></tr></table></figure>\n<p>最后通过 <code>IDEA</code> 客户端导入该项目即可。</p>\n<ul>\n<li>使用 <code>compiler</code> 插件编译项目</li>\n</ul>\n<p>我们使用 <code>Maven</code> 提供的 <code>compiler</code> 插件来编译项目，首先，我们先看看这个插件的 <code>Info</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn <span class=\"built_in\">help</span>:describe -Dplugin=compiler</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] org.apache.maven.plugins:maven-compiler-plugin:3.1</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Maven Compiler Plugin</span><br><span class=\"line\">Description: The Compiler Plugin is used to compile the sources of your</span><br><span class=\"line\">  project.</span><br><span class=\"line\">Group Id: org.apache.maven.plugins</span><br><span class=\"line\">Artifact Id: maven-compiler-plugin</span><br><span class=\"line\">Version: 3.1</span><br><span class=\"line\">Goal Prefix: compiler</span><br><span class=\"line\"></span><br><span class=\"line\">This plugin has 3 goals:</span><br><span class=\"line\"></span><br><span class=\"line\">compiler:compile</span><br><span class=\"line\">  Description: Compiles application sources</span><br><span class=\"line\"></span><br><span class=\"line\">compiler:<span class=\"built_in\">help</span></span><br><span class=\"line\">  Description: Display <span class=\"built_in\">help</span> information on maven-compiler-plugin.</span><br><span class=\"line\">    Call mvn compiler:<span class=\"built_in\">help</span> -Ddetail=<span class=\"literal\">true</span> -Dgoal=&lt;goal-name&gt; to display</span><br><span class=\"line\">    parameter details.</span><br><span class=\"line\"></span><br><span class=\"line\">compiler:testCompile</span><br><span class=\"line\">  Description: Compiles application <span class=\"built_in\">test</span> sources.</span><br><span class=\"line\"></span><br><span class=\"line\">For more information, run <span class=\"string\">'mvn help:describe [...] -Ddetail'</span></span><br></pre></td></tr></table></figure>\n<p><code>compiler</code> 插件有三个 <code>goals</code>，我们使用 <code>compiler:compile</code> 来编译项目的源代码，使用 <code>compiler:testCompile</code> 来编译我们的项目中的测试文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn compiler:compile</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] -----------------------&lt; com.sortinn:firstdemo &gt;------------------------</span><br><span class=\"line\">[INFO] Building firstdemo 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-compiler-plugin:3.1:compile (default-cli) @ firstdemo ---</span><br><span class=\"line\">[INFO] Changes detected - recompiling the module!</span><br><span class=\"line\">[INFO] Compiling 2 <span class=\"built_in\">source</span> files to /Users/sortinn/sortinn/Spring Project/demo-maven/target/classes</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 1.749 s</span><br><span class=\"line\">[INFO] Finished at: 2018-09-13T23:05:55+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>surefire</code> 插件跑测试</li>\n</ul>\n<p>同样，先查看 <code>surefire</code> 的 <code>Info</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn <span class=\"built_in\">help</span>:describe -Dplugin=surefire        </span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] -----------------------&lt; com.sortinn:firstdemo &gt;------------------------</span><br><span class=\"line\">[INFO] Building demo-maven 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-help-plugin:3.1.0:describe (default-cli) @ firstdemo ---</span><br><span class=\"line\">[INFO] org.apache.maven.plugins:maven-surefire-plugin:2.12.4</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Maven Surefire Plugin</span><br><span class=\"line\">Description: Surefire is a <span class=\"built_in\">test</span> framework project.</span><br><span class=\"line\">Group Id: org.apache.maven.plugins</span><br><span class=\"line\">Artifact Id: maven-surefire-plugin</span><br><span class=\"line\">Version: 2.12.4</span><br><span class=\"line\">Goal Prefix: surefire</span><br><span class=\"line\"></span><br><span class=\"line\">This plugin has 2 goals:</span><br><span class=\"line\"></span><br><span class=\"line\">surefire:<span class=\"built_in\">help</span></span><br><span class=\"line\">  Description: Display <span class=\"built_in\">help</span> information on maven-surefire-plugin.</span><br><span class=\"line\">    Call mvn surefire:<span class=\"built_in\">help</span> -Ddetail=<span class=\"literal\">true</span> -Dgoal=&lt;goal-name&gt; to display</span><br><span class=\"line\">    parameter details.</span><br><span class=\"line\"></span><br><span class=\"line\">surefire:<span class=\"built_in\">test</span></span><br><span class=\"line\">  Description: Run tests using Surefire.</span><br><span class=\"line\"></span><br><span class=\"line\">For more information, run <span class=\"string\">'mvn help:describe [...] -Ddetail'</span></span><br></pre></td></tr></table></figure>\n<p>很明显，我们使用 <code>goal</code> : <code>surefire:test</code> 来跑测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn surefire:<span class=\"built_in\">test</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\"> T E S T S</span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\">Running com.sortinn.PayTest</span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.066 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Results :</span><br><span class=\"line\"></span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"（二）使用生命周期阶段命令\"><a href=\"#（二）使用生命周期阶段命令\" class=\"headerlink\" title=\"（二）使用生命周期阶段命令\"></a>（二）使用生命周期阶段命令</h3><ul>\n<li>编译项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn compile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>跑测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>打包项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn package</span><br></pre></td></tr></table></figure>\n<p>看起来是不是很简洁傻瓜，这就是 Maven 强大特性的一个体现。</p>\n<p>在使用生命周期阶段命令时，<code>Maven</code> 会将当前执行的生命周期阶段之前的生命周期都顺序执行一遍。</p>\n<p>生命周期阶段命令是插件命令的有序集合。</p>\n<p>另外有几点需要注意：</p>\n<ul>\n<li>打包时包含第三方jar包</li>\n</ul>\n<p>如果没有做相关配置，这样直接打包生成的jar包是不包含第三方jar包的。如果需要将第三方jar包也打包进项目中，我们使用 <code>Maven</code> 提供的 <code>shade</code> 插件来完成。需要做如下配置：</p>\n<p>我们需要让 <code>shade</code> 插件在 <code>Maven</code> 打包的生命周期阶段发挥其作用，将第三方jar包一同打包，应在 <code>pom.xml</code> 文件中添加一下配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- shade执行的生命周期阶段 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这里我们需要导入一个第三方jar包来支撑我们测试这个插件，我们找的是阿里巴巴的 <code>fastjson</code> 插件，将其添加进 <code>pom.xml</code> 文件中：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.49<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后再执行 <code>mvn package</code> 命令即可将项目依赖的第三方 <code>jar</code> 包打包进我们的项目的 <code>jar</code> 包中去。最后 <code>Maven</code> 会生成两个 <code>jar</code> 包，一个是不包含第三方 <code>jar</code> 包，另一个则是包含的。</p>\n<ol>\n<li>生成可执行 <code>jar</code> 包</li>\n</ol>\n<p>在Maven官网有利用shade插件来实现生成可执行jar包的<a href=\"http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html#ManifestResourceTransformer\" target=\"_blank\" rel=\"noopener\">例子</a>，我们可以参照这个例子来进行配置shade插件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- shade执行的生命周期阶段 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">transformer</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Main-Class</span>&gt;</span>$&#123;app.main.class&#125;<span class=\"tag\">&lt;/<span class=\"name\">Main-Class</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">X-Compile-Source-JDK</span>&gt;</span>$&#123;maven.compile.source&#125;<span class=\"tag\">&lt;/<span class=\"name\">X-Compile-Source-JDK</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">X-Compile-Target-JDK</span>&gt;</span>$&#123;maven.compile.target&#125;<span class=\"tag\">&lt;/<span class=\"name\">X-Compile-Target-JDK</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">transformer</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>将 <code>xml</code> 文件中的 <code>${app.main.class}</code> 和 <code>${maven.compile.source}</code> 分别改为项目中 <code>main</code> 函数所在的类的全路径和你所使用的 <code>JDK</code> 版本，这样就告诉了 <code>shade</code> 该项目的入口(<code>entries</code>)位置。配置完成后打包项目。我们执行包含第三方 <code>jar</code> 包的可执行 <code>jar</code> 包，如下格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 jar 文件</span></span><br><span class=\"line\">$ java [-options] -jar jarfile [args...]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -jar firstdemo-1.0-SNAPSHOT.jar</span><br><span class=\"line\"><span class=\"comment\"># jar 文件执行结果</span></span><br><span class=\"line\">这里是项目的入口...</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Maven仓库网址：https-mvnrepository-com\"><a href=\"#Maven仓库网址：https-mvnrepository-com\" class=\"headerlink\" title=\"Maven仓库网址：https://mvnrepository.com\"></a>Maven仓库网址：<a href=\"https://mvnrepository.com\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com</a></h3><h3 id=\"Maven官网：https-maven-apache-org\"><a href=\"#Maven官网：https-maven-apache-org\" class=\"headerlink\" title=\"Maven官网：https://maven.apache.org\"></a>Maven官网：<a href=\"http://maven.apache.org\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org</a></h3>","categories":["CS Learning"],"tags":["项目管理工具"]},{"title":"MySQL基本概念和操作","url":"https://sortinn.club/2018/09/09/MySQL基本概念和操作/","content":"<h1 id=\"MySQL基本概念和操作\"><a href=\"#MySQL基本概念和操作\" class=\"headerlink\" title=\"MySQL基本概念和操作\"></a>MySQL基本概念和操作</h1><ol>\n<li>MySQL提示符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">提示符</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:center\">完整的日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">服务器名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\u</td>\n<td style=\"text-align:center\">当前用户</td>\n</tr>\n</tbody>\n</table>\n<p>   如：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; PROMPT \\u@\\h \\d &gt;</span><br></pre></td></tr></table></figure>\n<p>  可以将提示符改为：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost mysql &gt;</span><br></pre></td></tr></table></figure>\n  <a id=\"more\"></a>\n<p><strong>2. MySQL常用命令</strong></p>\n<ul>\n<li>显示当前服务器版本</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT VERSION();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示当前时间日期</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT NOW();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示当前用户</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT USER();</span><br></pre></td></tr></table></figure>\n<p><strong>3. MySQL语句规范</strong></p>\n<ul>\n<li>关键字与函数名称全部大写</li>\n<li>数据库名称、表名称、字段名称全部小写</li>\n<li>SQL语句必须以分号结尾</li>\n</ul>\n<p><strong>4. 数据库相关操作</strong></p>\n<ul>\n<li>创建数据库</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前服务器下数据表列表</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW &#123;DATABASES | SCHEMAS&#125; [LIKE &apos;pattern&apos; | WHERE expr]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打开数据库</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE db_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前数据库</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DATABASE();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看警告信息</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW WARNINGS;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看创建数据库时的信息</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改数据库</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER &#123;DATABASE | SCHEMA&#125; [db_name] [DEFAULT] CHARACTER SET [=] charset_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除数据库</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</span><br></pre></td></tr></table></figure>\n<p><strong>5. 数据表操作</strong></p>\n<ul>\n<li>创建数据表</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE [IF NOT EXISTS] table_name (</span><br><span class=\"line\">  ...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--  创建表的同时插入数据</span><br><span class=\"line\">  CREATE TABLE [IF NOT EXISTS] tbl_name(</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">  SELECT ...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看数据表列表</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW TABLES [FROM db_name] [LIKE &apos;pattern&apos; | WHERE expr]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看数据表结构</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLUMNS FROM tbl_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看数据表索引</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW INDEXES FROM tbl_name;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>插入记录</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1: INSERT [INTO] tbl_name [(col_name, ...)] VALUES(val, ...)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果省略列名或字段名，那么必须为所有列或字段赋值。</p>\n<p>如果要为默认的字段（如标记为 <code>Auto_Increment</code> 的字段）赋值，赋 <code>Null</code> 或 <code>Default</code> 即可。</p>\n<p>可一次插入多条记录。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case2: INSERT [INTO] tbl_name SET col_name = &#123;expr | DEFAULT&#125;, ...</span><br></pre></td></tr></table></figure>\n<pre><code>&gt;与第一种方法相比，这种插入数据的方法可以使用**子查询**(SubQuery)。\n&gt;\n&gt;一次只能插入一条记录。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case3: INSERT [INTO] tbl_name [(col_name,...)] SELECT ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个方法可以将查询结果插入指定数据表中。</p>\n</blockquote>\n<ul>\n<li>更新记录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 单表更新</span><br><span class=\"line\">  UPDATE [LOW_PRIORITY][IGNORE] tbl_reference SET col_name1=&#123;expr | DEFAULT&#125;[,col_name2=&#123;expr | DEFAULT&#125;]... [WHERE where_condition]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 多表更新</span><br><span class=\"line\">  UPDATE tbl_references SET col_name1 = &#123;expr1 | DEFAULT&#125;[,col_name2 = &#123;expr2 | DEFAULT&#125;]...[WHERE where_condition]</span><br><span class=\"line\">  </span><br><span class=\"line\">-- tbl_reference 表的参照关系之连接</span><br><span class=\"line\">tbl_name1 &#123;[INNER | CROSS] JOIN | &#123;LEFT | RIGHT&#125; [OUTER] JOIN&#125; tbl_name2 ON condition_expr</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除记录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 单表删除</span><br><span class=\"line\">  DELETE FROM tbl_name [WHERE where_condition]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>记录查询</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT expr, ... FROM tbl_name</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>GROUP BY</code> 对查询结果分组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GROUP BY &#123;col_name | position&#125; [ASC | DESC],...]</span><br></pre></td></tr></table></figure>\n<p>  <code>HAVING</code> 指定分组条件</p>\n<ol start=\"2\">\n<li><code>ORDER BY</code> 对查询结果排序</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ORDER BY &#123;col_name | expr | position&#125; [ASC | DESC],...]</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>LIMIT</code> 限制查询结果返回的数量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>子查询：出现在其他 <code>SQL</code> 语句中的 <code>SELECT</code> 子句。子查询必须括在小括号内。</li>\n</ul>\n<ol>\n<li>使用比较运算符的子查询。<strong>用 <code>ANY</code>、<code>SOME</code>、<code>ALL</code> 来修饰比较运算符</strong>；</li>\n<li>使用 <code>[NOT] IN</code> 的子查询；</li>\n<li>使用 <code>[NOT] EXIST</code> 的子查询</li>\n</ol>\n<ul>\n<li><p>修改数据表</p>\n<ul>\n<li>添加列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name ADD [COLUMNS] col_name column_definition [FIRST | AFTER col_name]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DROP [COLUMNS] col_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加主键约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加唯一约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY][index_name][index_type](index_col_name,...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加外键约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name](index_col_name,...) reference_definition</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加/删除默认约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除主键约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DROP PRIMARY KEY</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除唯一约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DROP &#123;INDEX | KEY&#125; index_name</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要首先查看索引名，再删除唯一约束。</p>\n</blockquote>\n<ul>\n<li>删除外键约束</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改列定义</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name MODIFY [COLUMNS] col_name column_definition [FIRST | AFTER col_name]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改列名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name CHANGE [COLUMNS] old_col_name new_col_name column_definition [FIRST | AFTER col_name]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改表名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1: ALTER TABLE tbl_name RENAME [TO | AS] new_tbl_name</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case2: RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2]...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接</p>\n</li>\n</ul>\n<ol>\n<li><code>INNER JOIN</code> 内连接</li>\n</ol>\n<blockquote>\n<p><code>MySQL</code> 中，<code>JOIN</code>、<code>CROSS JOIN</code>、<code>INNER JOIN</code> 是等价的。 </p>\n</blockquote>\n<ol start=\"2\">\n<li><code>LEFT [OUTER] JOIN</code> 左外连接</li>\n<li><code>RIGHT [OUTER] JOIN</code> 右外连接</li>\n</ol>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li>整型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">TINYINT</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SMALLINT</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MEDIUMINT</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INT</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BIGINT</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>浮点型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">存储范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">FLOAT[(M,D)]</td>\n<td style=\"text-align:center\">-3.4E+38 ~ 3.4E+38</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOUBLE[(M,D)]</td>\n<td style=\"text-align:center\">-1.8E+308 ~ 1.8E+308</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">说明</td>\n<td style=\"text-align:center\">M是数字总位数，D为小数点后的位数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>日期时间类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列类型</th>\n<th style=\"text-align:center\">存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">YEAR</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TIME</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATE</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATETIME</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TIMESTAMP</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>字符型</li>\n</ul>\n<p><img src=\"/images/charset.png\" alt=\"\"></p>\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><ol>\n<li><p>约束保证了数据的完整性和一致性</p>\n</li>\n<li><p>约束按数据列的数目分为表级约束和列级约束</p>\n<blockquote>\n<p>列级约束：对一个数据列建立的约束。可在列定义时或列定义后声明。</p>\n<p>表级约束：对多个数据列建立的约束。只能在列定义后声明。</p>\n</blockquote>\n</li>\n<li><p>约束按功能划分包括：</p>\n<blockquote>\n<p><code>NOT NULL</code> (非空约束)<br><code>PRIMARY KEY</code> (主键约束)<br><code>UNIQUE KEY</code> (唯一约束)<br><code>DEFAULT</code> (默认约束)<br><code>FOREIGN KEY</code> (外键约束)</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>空值与非空</p>\n<blockquote>\n<p><code>NULL</code><br><code>NOT NULL</code><br><code>AUTO_INCREMENT</code></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><code>AUTO_INCREMENT</code>:</p>\n<blockquote>\n<pre><code>a.自动编号，且必须与主键组合使用;但是主键不一定要与`AUTO_INCREMENT`一起使用;\n\n&gt;     b.默认情况下，起始值为1，每次的增量为1\n</code></pre></blockquote>\n</blockquote>\n<ul>\n<li><p><code>PRIMARY KEY</code>（主键约束）</p>\n<blockquote>\n<p>每张数据表只能存在一个主键<br>主键保证记录的唯一性<br>主键自动为<code>NOT NULL</code><br>主键在创建时会自动创建索引</p>\n</blockquote>\n</li>\n<li><p><code>UNIQUE KEY</code>（唯一约束）</p>\n<blockquote>\n<p>唯一约束可以保证记录的唯一性<br>唯一约束的字段可以为空值(<code>NULL</code>)<br>每张数据表可以存在多个唯一约束</p>\n</blockquote>\n</li>\n<li><p><code>DEFAULT</code>（默认约束）</p>\n<blockquote>\n<p>默认值<br>当插入记录时，如果没有明确字段赋值，则自动赋默认值</p>\n</blockquote>\n</li>\n<li><p><code>FOREIGN KEY</code>(外键约束)</p>\n<blockquote>\n<p>保持数据的一致性、完整性；<br>实现一对一或一对多的关系。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/images/foreign-key-require.png\" alt=\"\"></p>\n<p><img src=\"/images/foreign-key-operation.png\" alt=\"\"></p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost test&gt; CREATE TABLE province(</span><br><span class=\"line\">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">    -&gt; pname VARCHAR(20) NOT NULL</span><br><span class=\"line\">    -&gt; );</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost test&gt; CREATE TABLE users(</span><br><span class=\"line\">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">    -&gt; username VARCHAR(20) NOT NULL,</span><br><span class=\"line\">    -&gt; pid SMALLINT UNSIGNED,</span><br><span class=\"line\">    -&gt; FOREIGN KEY (pid) REFERENCES province(id) ON DELETE CASCADE</span><br><span class=\"line\">    -&gt; );</span><br></pre></td></tr></table></figure>\n<p>子表 <code>users</code> 在外键约束中为删除指定了 <code>CASCADE</code> 操作，那么父表 <code>province</code> 在删除内容时会同步删除子表对应内容。</p>\n","categories":["CS Learning"],"tags":["DataBase"]},{"title":"Java反射机制","url":"https://sortinn.club/2018/09/06/Java反射/","content":"<h2 id=\"Class-类\"><a href=\"#Class-类\" class=\"headerlink\" title=\"Class 类\"></a>Class 类</h2><p>在面向对象的世界里，万物皆对象。同样，类也是对象，是 <code>java.lang.Class</code> 类的实例对象。也就是说，任何一个类都是 <code>java.lang.Class</code> 类的实例对象。那怎么表示这个实例对象呢？如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassDemo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">       NoSuchMethodException, ClassNotFoundException,IllegalAccessException,InstantiationException </span>&#123;</span><br><span class=\"line\">        Foo foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">\"Foo object prints...\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"实例化“类”这个对象\"><a href=\"#实例化“类”这个对象\" class=\"headerlink\" title=\"实例化“类”这个对象\"></a>实例化“类”这个对象</h4><p>类 <code>Foo</code> 也是一个对象，我们可以用下面三个方法来实例化这个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: </span></span><br><span class=\"line\">Class class1 = Foo.class;</span><br></pre></td></tr></table></figure>\n<p>这也说明了每一个类都有一个隐含的静态实例变量 <code>class</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 2:</span></span><br><span class=\"line\">Class class2 = foo.getClass();</span><br></pre></td></tr></table></figure>\n<p>这种方式需要一个已知的类对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 3:</span></span><br><span class=\"line\">Class class3 = Class.forName($&#123;classpath&#125;);</span><br></pre></td></tr></table></figure>\n<p> <code>class1、class2 和 class3</code> 表示 <code>Foo</code> 类的类类型 <code>(class type)</code> 。它们都表示的同一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(class1 == class2 &amp;&amp; class2 == class3 &amp;&amp; class1 == class3);</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过类类型-class-type-来创建该类的对象\"><a href=\"#通过类类型-class-type-来创建该类的对象\" class=\"headerlink\" title=\"通过类类型(class type)来创建该类的对象\"></a>通过类类型(class type)来创建该类的对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo instance = (Foo) c1.newInstance();</span><br><span class=\"line\"><span class=\"comment\">// Foo object prints...</span></span><br><span class=\"line\">instance.print();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Java-动态加载类\"><a href=\"#Java-动态加载类\" class=\"headerlink\" title=\"Java 动态加载类\"></a>Java 动态加载类</h2><h4 id=\"Class-forName-classpath\"><a href=\"#Class-forName-classpath\" class=\"headerlink\" title=\"Class.forName(${classpath})\"></a>Class.forName(${classpath})</h4><p>编译时刻加载类是静态加载类；</p>\n<p>运行时刻加载类是动态加载类。</p>\n<p>静态加载类有着诸多不便之处，编译器必须将程序中所出现的所有类找到并编译成功，程序才可能正确运行。而动态加载类则不必这样“万事俱备”，只需要编译程序运行中用到的类， <code>Class.forName(${classpath})</code> 这个静态方法通过类的全路径找到所需的类并加载，可以非常灵活地运行程序。</p>\n<p>举例说明：</p>\n<p>有三个类，代表三种类型的汽车，用户通过在终端输入汽车的类型来查看相应的介绍：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LuxuriousCar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is luxurious car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiniCar</span>  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is mini car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SportsCar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is sports car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InfoOfCars</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String in = <span class=\"keyword\">new</span> Scanner(System.in).next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"sports\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> SportsCar().introduce();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"mini\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> MiniCar().introduce();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"luxurious\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> LuxuriousCar().introduce();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果静态加载类，这段代码要把程序中出现的所以类都编译，但是回过头来想一下，程序只接受我们输入的一个参数，也就是说，这段代码里的条件判断语句只可能执行一条。另外，如果某一个类出现未知的错误，就会影响我们整个程序的运行，可以说程序运行的效率是很低的。再者，我们这里只列出了三种汽车类型，且这三种类型都调用了同样的方法签名，前者是不太现实的，后者又造成了代码的冗余。</p>\n<p>针对种种问题，我们应一一解决。</p>\n<p>我们可以使用动态加载类，让程序在执行过程中再去寻找类并加载它。</p>\n<p>对于冗余的代码，我们可以采用<strong>面向接口编程</strong>，制订一套规则，让这些汽车类型都遵守这套规则，我们的代码就会简洁得多。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LuxuriousCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is luxurious car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiniCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is mini car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SportsCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">introduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"This is sports car's introduce...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InfoOfCars</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">      ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String in = <span class=\"keyword\">new</span> Scanner(System.in).next();</span><br><span class=\"line\"></span><br><span class=\"line\">    String classpath = <span class=\"string\">\"com.sortinn.\"</span> + in;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; aClass = Class.forName(classpath);</span><br><span class=\"line\">    Car car = (Car) aClass.newInstance();</span><br><span class=\"line\">    car.introduce();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先，我们根据输入的汽车类型构造类的全路径（假定输入的类型和对应类名相同），然后我们添加一个 <code>Car</code> 接口，添加一个 <code>introduce()</code> 方法。</p>\n<p>我们让所有的汽车类都实现这个方法。</p>\n<p>使用 Class 类的静态方法 <code>forName(String className)</code> 来动态加载特定的汽车类。使用 <code>newInstance()</code> 方法实例化这个汽车类。</p>\n<p>最后，多态调用 <code>introduce()</code> 。</p>\n<p>如果要添加新的汽车类型，只需要实现 <code>Car</code> 接口即可，主方法中不需要改变任何一行代码，是不是很酷！</p>\n<h2 id=\"方法反射的基本操作\"><a href=\"#方法反射的基本操作\" class=\"headerlink\" title=\"方法反射的基本操作\"></a>方法反射的基本操作</h2><p>通过 <code>Class</code> 类的 <code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code> 方法返回指定成员方法的 <code>Method</code> 对象，然后调用这个 <code>Method</code> 对象的 <code>invoke(Object obj, Object... args)</code> 方法来完成方法反射操作。</p>\n<p>将上面的例子用方法反射重写如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sortinn.car;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">InfoOfCars</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String in = <span class=\"keyword\">new</span> Scanner(System.in).next();</span><br><span class=\"line\">    String classpath = <span class=\"string\">\"com.sortinn.car.\"</span> + in;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; aClass = Class.forName(classpath);</span><br><span class=\"line\">    Car car = (Car) aClass.newInstance();</span><br><span class=\"line\">    Method introduce = aClass.getMethod(<span class=\"string\">\"introduce\"</span>);</span><br><span class=\"line\">    introduce.invoke(car);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以得到正确的结果。</p>\n","categories":[],"tags":["Java"]},{"title":"album","url":"https://sortinn.club/album/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://sortinn.club/search/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://sortinn.club/about/index.html","content":"","categories":[],"tags":[]}]